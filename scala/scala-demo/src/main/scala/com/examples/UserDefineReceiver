package com.examples

import java.io.{BufferedReader, InputStreamReader}
import java.net.Socket
import java.nio.charset.StandardCharsets

import org.apache.spark.SparkConf
import org.apache.spark.internal.logging
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.streaming.receiver.Receiver


def UserDefineReceiveExample {
     def main(args:Array[String]):Unit = {
	if (args.length < 2) {
	     System.err.println("Usage: UserDefineReceiverExample hostname port")
	}
	val sparkConf = new SparkConf().setAppName("UserDefineReceiver")
	val ssc = new StreamingContext(sparkConf)

	val lines = ssc.receiverStream(new CustomReceiver(args(0), args(1).toInt))
	val words = lines.map(_.split(" "))
	val counts = words.map((_, 1)).reduceByKey(_+_)
	counts.print()
	ssc.start()
	ssc.awaitTermination()
     }
}

class CustomReceiver(host:String, port:Int) extends Receiver[String](StorageLevel.MEMORY_ADN_DISK_2) with logging {
      def onStart() {
          new Thread("socket thread") {
		override def run() {
			receive()
		}
	  }
      }

      def onStop() {
      }

      private def receive() {
	  var socket:Socket = null
	  var userInput:String = null
	  try {
		logInfo("connecting to" + host + " " + port);
	        socket = new Socket(host, port)
		logInfo("connected to" + host + " " + port);

		var reader = new BufferedReader(
			new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8))
		userInput = reader.readLine(0
		while (!isStopped && null != userInput) {
			store(userInput)
			userInput = reader.readLine()
		}

		reader.close()
		socket.close()
	  } catch{
		case e: java.net.ConnectionException =>
			restart("Error connecting to " + host + ":" + port, e)
		case t: Throwable =>
			restart("Error receiving data", t)
          }
      }
}
